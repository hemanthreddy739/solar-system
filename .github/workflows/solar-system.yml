name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  unit-testing:
    name: Unit Testing
    # Use the container for the job's execution environment.
    container:
      image: node:${{ matrix.nodejs_version }}
    
    services:
        mongo-db:
          image: hemanthreddy739/solar-system-mongodb:dev
    env:
        MONGO_URI: 'mongodb://mongo-db:27017/solar-system-db?authSource=admin'
        MONGO_USERNAME: dev-user
        MONGO_PASSWORD: demo@123

    strategy:
      matrix:
        nodejs_version: [18, 20]
    
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      
      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules 

      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "Mocha-Test-Result-node-${{matrix.nodejs_version}}"
          path: test-results.xml
    runs-on: ubuntu-latest

  code-coverage:
      name: Code Coverage
      container: 
          image: node:18
      services:
        mongo-db:
          image: hemanthreddy739/solar-system-mongodb:dev
      env:
          MONGO_URI: 'mongodb://mongo-db:27017/solar-system-db?authSource=admin'
          MONGO_USERNAME: dev-user
          MONGO_PASSWORD: demo@123
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  upload-to-s3:
    name: Upload Artifacts to S3
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    env:
      S3_BUCKET: ${{ vars.S3_BUCKET_NAME }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download all artifacts from the workflow run
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts/

      - name: Sync artifacts to S3
        run: |
          aws s3 sync ./downloaded-artifacts/ s3://${{ env.S3_BUCKET }}/artifact-${{ github.sha }}

  docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      services:
        mongo-db:
          image: hemanthreddy739/solar-system-mongodb:dev
      env:
          MONGO_URI: 'mongodb://mongo-db:27017/solar-system-db?authSource=admin'
          MONGO_USERNAME: dev-user
          MONGO_PASSWORD: demo@123
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v5



      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

  

      - name: Docker Build For Testing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d  \
              -p 3000:3000 \
              -e MONGO_URI=${{env.MONGO_URI}} \
              -e MONGO_USERNAME=${{env.MONGO_USERNAME}}\
              -e MONGO_PASSWORD=${{env.MONGO_PASSWORD}} \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
          
          
          echo Testing Image URL using wget 
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
           

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets: 
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      # need to make mongo-db credentials variablalised
      mongo-uri: ${{secrets.MONGO_URI}}
      mongo-db-username: ${{secrets.MONGO_USERNAME}}
      mongo-db-password: ${{secrets.MONGO_PASSWORD}}

      aws-access-key: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

    with:
      deploy-environment: development
      k8s-manifest-dir: kubernetes/
      


  dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Install jq
          run: |
            sudo apt-get update
            sudo apt-get install -y jq

        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "--------------------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml 
    secrets: 
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      # need to make mongo-db credentials variablalised
      mongo-uri: ${{secrets.MONGO_URI}}
      mongo-db-username: ${{secrets.MONGO_USERNAME}}
      mongo-db-password: ${{secrets.MONGO_PASSWORD}}

      aws-access-key: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    with:
      deploy-environment: production
      k8s-manifest-dir: kubernetes
      
  prod-integration-testing:
      name: Prod Integration Testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Install jq
          run: |
            sudo apt-get update
            sudo apt-get install -y jq

        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "--------------------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live
   
